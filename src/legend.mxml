<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 currentState="open" >
	
	<fx:Script>        
		<![CDATA[
			import itemRenderers.BaseMapItemRenderer;
			
			import mx.collections.ArrayCollection;
			[Bindable]
			private var baseMaps:ArrayCollection = new ArrayCollection([
				{name:'Street Map',icon:'basemap_street.png',description:'Standard Road Map'},
				{name:'Satellite Map',icon:'basemap_sat.png',description:'Map made up of photos taken by plane and satellite'},
				{name:'Topographic Map',icon:'basemap_topo.png',description:'Detailed topographic map based on USGS scans'},
				{name:'Elevation Map',icon:'basemap_elevation.png',description:'Map showing elevation by shading mountains'}]);
			
			[Bindable]
			private var layers:ArrayCollection = new ArrayCollection([
				{name:'Zoom In',icon:'zoomIn.png',description:'You can also use the scroll wheel on your mouse'},
				{name:'Zoom Out',icon:'zoomOut.png',description:'You can also use the scroll wheel on your mouse'},
				{name:'Reset Map',icon:'resetMap.png',description:'Reset map to original extent'},
				{name:'Previous Extent',icon:'previousExtent.png',description:'Zoom back to previous extent'},
				{name:'Next Extent',icon:'nextExtent.png',description:'Zoom to next extent'},
				{name:'Re-Center Map',icon:'pan.png',description:'Click and drag map to move around'}]);

			protected function hide_clickHandler(event:MouseEvent):void
			{
				if(this.currentState!='closed'){
					this.currentState='closed'
					hide.label='Show Legend';
				}
				else{
					this.currentState='open'
					hide.label='hide';
				}
				
			}
			
			private var hidePopupTimer:Timer = new Timer(200);
			private var popupActive:Boolean = false;
			private var popupTriggerActive:Boolean = false;
			protected function hidePopup():void{
				hidePopupTimer.addEventListener(TimerEvent.TIMER,hidePopupTimerHandler);
				hidePopupTimer.start();
			}	
			
			protected function hidePopupTimerHandler(event:TimerEvent):void{
				hidePopupTimer.reset();
				if(!popupActive && !popupTriggerActive){
					baseMapPopup.displayPopUp=false;
					baseMapText.setStyle('backgroundAlpha',0);
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:LinearGradient rotation="90" id="fill1">
			<s:GradientEntry color="0xFFFFFF" />
			<s:GradientEntry color="0x336699" />
		</s:LinearGradient>
		
	</fx:Declarations>
	<s:states> 
		<s:State name="closed"/>    
		<s:State name="open"/>
		<s:State name="detailed"/>
	</s:states> 
	
	<!-- Define the transition to animate the change of view state. -->
	<s:transitions>
		<mx:Transition toState="closed">
			<s:Sequence>
				<s:Parallel>
					<s:Rotate target="{hide}" angleTo="-90" duration="200"/>
					<s:Fade target="{legendTitle}" duration="200"/>
					<s:Animate target="{legendBox}" duration="200">
						<s:SimpleMotionPath property="width" />
					</s:Animate>
				</s:Parallel>
				<s:Parallel>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="height" />
					</s:Animate>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="backgroundAlpha" />
					</s:Animate>
				</s:Parallel>
			</s:Sequence>
		</mx:Transition>
		<mx:Transition fromState="closed">
			<s:Sequence>
				<s:Parallel>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="backgroundAlpha" />
					</s:Animate>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="height" />
					</s:Animate>
				</s:Parallel>
				<s:Parallel>
					<s:Rotate target="{hide}" angleTo="0" duration="200"/>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="width" />
					</s:Animate>
					<s:Fade target="{legendTitle}" duration="200" alphaTo="100"/>
				</s:Parallel>
			</s:Sequence>
		</mx:Transition>
		<mx:Transition fromState="detailed">
			<s:Sequence>
				<s:Parallel>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="backgroundAlpha" />
					</s:Animate>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="height" />
					</s:Animate>
				</s:Parallel>
				<s:Parallel>
					<s:Rotate target="{hide}" angleTo="0" duration="200"/>
					<s:Animate target="{legendBox}" duration="200" >
						<s:SimpleMotionPath property="width" />
					</s:Animate>
					<s:Fade target="{legendTitle}" duration="200" alphaTo="100"/>
				</s:Parallel>
			</s:Sequence>
		</mx:Transition>
		<mx:Transition toState="detailed">
			<s:Parallel>
				<s:Animate target="{legendBox}" duration="200" >
					<s:SimpleMotionPath property="height" />
				</s:Animate>
				<s:Animate target="{legendBox}" duration="200" >
					<s:SimpleMotionPath property="width" />
				</s:Animate>
			</s:Parallel>
		</mx:Transition>
	</s:transitions>
	
	<mx:VBox id="legendBox" width="200" height="300" cornerRadius="5"
			 backgroundAlpha=".7" backgroundColor="#ffffff"
			 paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15"
			 height.closed="120" width.closed="40" backgroundAlpha.closed="0"
			 height.detailed="400" width.detailed="400">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label id="legendTitle" text="Legend" styleName="LegendTitle" fontSize="18" visible.closed="false" includeInLayout.closed="false"/>
			<mx:Spacer width="100%"/>
			<s:Button id="hide" label="hide" click="hide_clickHandler(event)"/>
		</s:HGroup>
		<s:Group width="100%" visible.closed="false" includeInLayout.closed="false" height="40">
			<mx:HRule width="100%" height="1" top="5"/>
			<s:PopUpAnchor id="baseMapPopup" left="-10" top="0" height="100%" width="100%" popUpPosition="left"  
						   displayPopUp="false">
				<s:BorderContainer cornerRadius="5" width="100%"
								   dropShadowVisible="true"
								   rollOver="popupActive=true" rollOut="popupActive=false;hidePopup();">
					<s:VGroup width="100%"
							  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
						<s:Label text="Choose Base Map"/>
						<mx:HRule width="100%" height="1" top="5"/>
						<s:List id="baseMapList" width="100%" 
								itemRenderer="itemRenderers.BaseMapItemRenderer" 
								dataProvider="{baseMaps}" selectionColor="#ffffff"
								borderAlpha="1" click="popupActive=false;hidePopup();">
						</s:List>
						<mx:HRule width="100%" height="1"/>
						<s:HGroup verticalAlign="middle">
							<s:CheckBox/>
							<s:Label text="Always show street Labels"/>
						</s:HGroup>
					</s:VGroup>
					<mx:Image source="images/leftPopoutArrow.png" right="-10" y="10" id="subMenuItemIcon"/>
				</s:BorderContainer>
			</s:PopUpAnchor>
			<mx:HBox width="100%" height="20" top="10" id="baseMapText"
					 backgroundAlpha="0" backgroundColor="blue" buttonMode="true" useHandCursor="true"
					  verticalAlign="middle" rollOver="popupTriggerActive=true;baseMapPopup.displayPopUp=true;baseMapText.setStyle('backgroundAlpha',.15)" rollOut="popupTriggerActive=false;hidePopup()">
				<s:Label text="Base Map:" styleName="subMenuPreview"/>
				<s:Label text="Street Map" styleName="subMenuPreview"/>
			</mx:HBox>
			<mx:HRule width="100%" height="1" bottom="5"/>
		</s:Group>
		<s:DataGroup id="menuData" dataProvider="{layers}" visible.closed="false" includeInLayout.closed="false" >
			<s:layout>
				<s:VerticalLayout gap="0" useVirtualLayout="true"/>
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer autoDrawBackground="false">
						<s:states>
							<s:State name="normal" />
							<s:State name="hovered" />
						</s:states>
						
						<fx:Script>
							<![CDATA[
								override public function set data(value:Object):void {
									super.data = value;
									
									if (data == null) // a renderer's data is set to null when it goes out of view
										return;
									
									subMenuItemName.text = data.name;
									subMenuItemDescription.text = data.description;
									subMenuItemIcon.source = 'images/' + data.icon;
								}
							]]>
						</fx:Script>
						<s:transitions>
							
							<mx:Transition fromState="normal" toState="hovered">
								<s:Animate target="{subMenuItemIcon}" duration="200">
									<s:SimpleMotionPath property="width" />
								</s:Animate>
							</mx:Transition>
							<mx:Transition fromState="hovered" toState="normal">
								<s:Animate target="{subMenuItemIcon}" duration="200" >
									<s:SimpleMotionPath property="width" />
								</s:Animate>
							</mx:Transition>
						</s:transitions>
						
						<mx:HBox id="item" verticalAlign="middle" width="200" height="75" backgroundColor="red" backgroundAlpha="0"
								 useHandCursor="true" buttonMode="true" mouseChildren='false'>
							<mx:Image id="subMenuItemIcon" width="26" width.hovered="52"/>
							<s:VGroup width="100%">
								<s:Label id="subMenuItemName" color="#000000" fontSize="12" fontSize.hovered="18" fontFamily="Georgia"/>
								<s:Label width="120" id="subMenuItemDescription" color="#333333" fontSize="10" alpha="0" alpha.hovered="1"/>
							</s:VGroup>
						</mx:HBox>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:DataGroup>
	</mx:VBox>
</s:Group>
